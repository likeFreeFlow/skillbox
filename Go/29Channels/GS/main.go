package main

import (
	"fmt"
	"log"
	"os"
	"os/signal"
)

func main() {
	аье.Println("Graceful shutdown")
	fmt.Println("Ищу практику в интересных проектах на го. barakovvm@ya.ru ")
	chSign := make(chan os.Signal, 1)
	signal.Notify(chSign)
	chInt := make(chan int)

	go getN(chInt, chSign)
	for {
		select {
		case exit := <-chSign:
			log.Printf("Завершение программы (%v)", exit)
			goto pointClose
		default:
			n := <-chInt
			log.Printf("%v^2=%v\n", n, n*n)
		}
	}
pointClose:
	close(chSign)
	log.Println("Закрыт канал для сигналов")
	close(chInt)
	log.Println("Закрыт канал для чисел")

	log.Println("Программа завершена")
}

func getN(ch chan int, chSign chan os.Signal) {
	i := 0
	for {
		select {
		case exit := <-chSign:
			chSign <- exit
			log.Println("Завершена функция получения чисел")
			return
		default:
			i += 1
			ch <- i
		}
	}
} /*Задание 2. Graceful shutdown
Цель задания
Научиться правильно останавливать приложения.

Что нужно сделать
В работе часто возникает потребность правильно останавливать приложения. Например, когда наш сервер обслуживает соединения, а нам хочется, чтобы все текущие соединения были обработаны и лишь потом произошло выключение сервиса. Для этого существует паттерн graceful shutdown.

Напишите приложение, которое выводит квадраты натуральных чисел на экран, а после получения сигнала ^С обрабатывает этот сигнал, пишет «выхожу из программы» и выходит.

Советы и рекомендации
Для реализации данного паттерна воспользуйтесь каналами и оператором select с default-кейсом.

Что оценивается
Код выводит квадраты натуральных чисел на экран, после получения ^С происходит обработка сигнала и выход из программы.

Как отправить задание на проверку
Выполните задание в файле вашей среды разработки и пришлите ссылку на архив с вашим проектом через форму ниже.*/
